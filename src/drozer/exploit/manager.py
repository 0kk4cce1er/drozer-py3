import argparse
import sys

from mwr.common import cli, console

from drozer.exploit import builder

class ExploitManager(cli.Base):
    """
    drozer exploit COMMAND [OPTIONS]
    
    A utility for crafting exploits to deliver drozer onto an Android device.
    """
    
    def __init__(self):
        cli.Base.__init__(self)
    
    def args_for_build(self):
        self._parser.add_argument("exploit", help="specify the exploit module to use")
        self._parser.add_argument("shellcode", help="specify the shellcode module to use")
        self._parser.add_argument("--credentials", default=None, nargs=2, metavar=("username", "password"), help="add a username/password pair that can be used to upload files to the server")
        self._parser.add_argument("--server", default=None, metavar="HOST[:PORT]", help="specify the address and port of the drozer server")
        self._parser.add_argument("--ssl", action=self.__build_store_zero_or_two_action(), help="enable SSL, optionally specifying the key and certificate", nargs="*")
        
        # exploit => webkit bug
        # shellcode => weasel downloader
        
    def do_build(self, arguments):
        """build an exploit"""
        
        builder.Builder().build(arguments.exploit, arguments)

    def args_for_info(self):
        self._parser.add_argument("module", help="specify the exploit module to use")
        
    def do_info(self, arguments):
        """prints information about an exploit module"""
        
        module = builder.Builder().module(arguments.module)
        
        print module.usage.formatted_description()
        
    def do_list(self, arguments):
        """list the available exploit modules"""
        
        exploit_builder = builder.Builder() 
        
        sys.stdout.write(console.format_dict(dict(map(lambda m: [m, exploit_builder.module(m).name], exploit_builder.modules()))) + "\n")
    
    def __build_store_zero_or_two_action(self):
        class RequiredLength(argparse.Action):
            def __call__(self, parser, args, values, option_string=None):
                if not (len(values) == 0 or len(values) == 2):
                    msg='argument "--{f}" requires either 0 or 2 arguments'.format(f=self.dest)
                    raise argparse.ArgumentTypeError(msg)
                setattr(args, self.dest, values)
        return RequiredLength
        